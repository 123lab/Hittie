{		var composition = app.project.activeItem;	var layers = composition.selectedLayers;	var properties = composition.selectedProperties;	var numFrames = Math.floor(composition.duration / composition.frameDuration);		var outputString = ''	output('<?xml version="1.0" encoding="utf-8"?>');	output('<data>');		buildFile();	writeFile();		function buildFile() {		if (properties.length == 0) {			alert("No properties selected.");		}		else {			exportProperties();		}	}		function output(value) {		outputString += value + "\r";	}		function writeFile() {		output('</data>');		var file = new File(Folder.desktop.absoluteURI + "/" + "export.txt");		file.open("w","TEXT","????");		file.write(outputString);		file.close();		file.execute();	}		function exportProperties() {		var i = 0;		var l = numFrames;		for (; i<l; ++i) {			var time = i * composition.frameDuration;			output('	<keyframe frame="' + i + '" time="' + time + '">');			// build properties list			var x = 0;			var y = properties.length;			var source = [];			var sourceCount = 0;			var currentContainer;			for (; x<y; ++x) {				if (properties[x].valueAtTime != undefined) {					var parentName;					if (properties[x].parentProperty != undefined) {						parentName = properties[x].parentProperty.name;					}					else {						parentName = "Undefined Property";					}					if (source[parentName] == undefined) {						source[parentName] = {};						source[parentName].name = properties[x].name;						source[parentName].values = [];					}					source[parentName].values.push(properties[x]);				}			}			// build xml			for (var pn in source) {				output('		<source name="' + pn + '">');				var x = 0;				var y = source[pn].values.length;				for (; x<y; ++x) {					exportProperty(source[pn].values[x], time)				}				output('		</source>');			}			output('	</keyframe>');		}	}		function exportProperty(prop, time) {		var val = prop.valueAtTime(time, true);		if (val.length > 1) {			exportMultiValue(prop, val);		}		else {			exportSingleValue(prop, val);		}	}		function exportSingleValue(prop, val) {		output('			<property name="' + prop.name + '" value="' + val + '"/>');	}		function exportMultiValue(prop, val) {		var str = '			<property name="' + prop.name + '"';				var i = 0;		var l = val.length;		for (; i<l; ++i) {			str += ' value' + i + '="' + val[i] + '"';		}				str += '/>';		output(str);	}		function outputObject(obj) {		var out = "";		for (var s in obj) {			out += s + "\n";		}		alert(out);	}}